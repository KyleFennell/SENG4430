package modules;
/*	Author: Callan Hampton
 *  StudentNum: C3235869
 *
 *  TODO 
 *  	Develop Unit tests
 *  	Error handling
 */

import java.util.ArrayList;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.PackageDeclaration;
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.body.Parameter;
import com.github.javaparser.ast.body.VariableDeclarator;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;
import com.github.javaparser.utils.SourceRoot;

public class AverageLengthOfIdentifier implements ModuleInterface
{
	private static final String MODULE_NAME = "Average Identifier Length",
						MODULE_DESCRIPTION = "This module calculates the average character length of all identifiers that appear in a given Java file.";
	
	private int currentAverage,totalAverage,methodAverage,classAverage,parameterAverage,packageAverage,variableAverage;

	public AverageLengthOfIdentifier()
	{
		currentAverage = 0;
		totalAverage = 0;
		classAverage = 0;
		parameterAverage = 0;
		packageAverage = 0;
	}
   
   public String getName()
	{
		return MODULE_NAME;
	}
	
    // returns any error information
	private int calculateIdentifierLength (ArrayList<String>  IdentifierList )
	{
		int total = 0;
			for(String identifier: IdentifierList)
			{
				total += identifier.length();
			}
		return total;
	}

   public String[] executeModule(SourceRoot sourceRoot)
	{
			ArrayList<CompilationUnit> units = (ArrayList<CompilationUnit>)sourceRoot.getCompilationUnits();
			ArrayList<String>
							methods  	= new ArrayList<>(),
							variables 	= new ArrayList<>(),
							classes  	= new ArrayList<>(),
							packages 	= new ArrayList<>(),
							parameters 	= new ArrayList<>();
			for(CompilationUnit unit : units)
			{
				unit.accept(new MethodVisitor(), methods);
				unit.accept(new VariableVisitor(), variables);
				unit.accept(new ClassVisitor(), classes);
				unit.accept(new ParameterVisitor(), parameters);
				unit.accept(new PackageVisitor(), packages);
			}

			int 	methodChars = calculateIdentifierLength(methods),
					variableChars = calculateIdentifierLength(variables),
					classChars = calculateIdentifierLength(classes),
					parameterChars = calculateIdentifierLength(parameters),
					packageChars = calculateIdentifierLength(packages),
					totalChars = methodChars + variableChars + classChars + parameterChars,
					totalIdentifiers = methods.size() + variables.size() + classes.size() + parameters.size();


			totalAverage = totalChars/totalIdentifiers;
			variableAverage = variableChars/variables.size();
			methodAverage = methodChars/methods.size();
			classAverage = classChars/classes.size();
			parameterAverage = parameterChars/parameters.size();
			packageAverage = packageChars/packages.size();

			return new String[]
			{
					Integer.toString(totalAverage),
					Integer.toString(variableAverage),
					Integer.toString(methodAverage),
					Integer.toString(classAverage),
					Integer.toString(parameterAverage),
					Integer.toString(packageAverage),
			};
	}

    // description of what the module does
   public  String getDescription()
	{
		return MODULE_DESCRIPTION;
	}

    // prints the report generated by running the module
   public  String printMetrics()
   {
	   return  "Average length of all identifiers: " + currentAverage +'\n' +
			   "Average length of variable identifiers " + variableAverage+'\n' +
			   "Average length of method identifiers " + methodAverage+'\n' +
			   "Average length of class identifiers" + currentAverage +'\n' +
			   "Average length of parameter identifiers: " + currentAverage +'\n' +
			   "Average length of package identifiers: " + currentAverage +'\n';

   }



/**
 * Simple visitor implementation for visiting MethodDeclaration nodes.
 */
	private static class VariableVisitor extends VoidVisitorAdapter<ArrayList<String>>
	{
		@Override
		public void  visit(VariableDeclarator n, ArrayList<String> arg)
		{
			if(arg == null)
			{
				arg = new ArrayList<>();
			}
			arg.add(n.getNameAsString());
			super.visit(n, arg);
		}
	}

	private static class MethodVisitor extends VoidVisitorAdapter<ArrayList<String>>
{
	@Override
	public void  visit(MethodDeclaration n, ArrayList<String> arg)
	{
		if(arg == null)
		{
			arg = new ArrayList<>();
		}
		arg.add(n.getNameAsString());
		super.visit(n, arg);
	}
}
	private static class ClassVisitor extends VoidVisitorAdapter<ArrayList<String>>
	{
		@Override
		public void  visit(ClassOrInterfaceDeclaration n, ArrayList<String> arg)
		{
			if(arg == null)
			{
				arg = new ArrayList<>();
			}
			arg.add(n.getNameAsString());
			super.visit(n, arg);
		}
	}
	private static class ParameterVisitor extends VoidVisitorAdapter<ArrayList<String>>
	{
		@Override
		public void  visit(Parameter n, ArrayList<String> arg)
		{
			if(arg == null)
			{
				arg = new ArrayList<>();
			}
			arg.add(n.getNameAsString());
			super.visit(n, arg);
		}
	}

	private static class PackageVisitor extends VoidVisitorAdapter<ArrayList<String>>
	{
		@Override
		public void  visit(PackageDeclaration n, ArrayList<String> arg)
		{
			if(arg == null)
			{
				arg = new ArrayList<>();
			}
			arg.add(n.getNameAsString());
			super.visit(n, arg);
		}
	}
}