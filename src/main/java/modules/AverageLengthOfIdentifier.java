package modules;/*	Author: Callan Hampton
 *  StudentNum: C3235869
 *
 *  TODO 
 *  	Add other possible identifiers, class names method names etc.
 *  	More statistics on those
 *  	Develop Unit tests
 *  	Error handling
 */

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import com.github.javaparser.JavaParser;
import com.github.javaparser.ParseResult;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.body.Parameter;
import com.github.javaparser.ast.body.VariableDeclarator;
import com.github.javaparser.ast.expr.Name;
import com.github.javaparser.ast.expr.SimpleName;
import com.github.javaparser.ast.visitor.CloneVisitor;
import com.github.javaparser.ast.visitor.GenericVisitorAdapter;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;
import com.github.javaparser.resolution.declarations.ResolvedParameterDeclaration;
import com.github.javaparser.utils.SourceRoot;

public class AverageLengthOfIdentifier implements ModuleInterface
{
	public static final String MODULE_NAME = "Average Identifier Length", 
						MODULE_DESCRIPTION = "This module calculates the average character length of all identifiers that appear in a given Java file.";
	
	private int currentAverage;
	
	public AverageLengthOfIdentifier()
	{
		currentAverage = 0;
	}
   
   public String getName()
	{
		return MODULE_NAME;
	}
	
    // returns any error information
   public String[] executeModule(SourceRoot sourceRoot)
	{
		try
		{
			ArrayList<CompilationUnit> units = (ArrayList<CompilationUnit>)sourceRoot.getCompilationUnits();
			ArrayList<String>
							methods  	= new ArrayList<>(),
							variables 	= new ArrayList<>(),
							classes  	= new ArrayList<>(),
							packages 	= new ArrayList<>(),
							parameters 	= new ArrayList<>();
			for(CompilationUnit unit : units)
			{
				unit.accept(new MethodVisitor(), methods);
				unit.accept(new VariableVisitor(), variables);
				unit.accept(new ClassVisitor(), classes);
				unit.accept(new ParameterVisitor(), parameters);
			}
			int totalChars = 0, totalIdentifiers = methods.size() + variables.size() + classes.size() + parameters.size();

			for(String ident: methods)
			{
				totalChars += ident.length();
			}

			for(String ident: variables)
			{
				totalChars += ident.length();
			}
			for(String ident: classes)
			{
				totalChars += ident.length();
			}
			for(String ident: parameters)
			{
				totalChars += ident.length();
			}

			currentAverage = totalChars/totalIdentifiers;
} catch (Exception e)
		{
			e.printStackTrace();
		return new String[] {"Error"};
		}
		return null;	
	}

    // description of what the module does
   public  String getDescription()
	{
		return MODULE_DESCRIPTION;
	}

    // prints the report generated by running the module
   public  String printMetrics()
   {
	   return "Average length of identifiers: " + currentAverage;
   }



/**
 * Simple visitor implementation for visiting MethodDeclaration nodes.
 */
	private static class VariableVisitor extends VoidVisitorAdapter<ArrayList<String>>
	{
		@Override
		public void  visit(VariableDeclarator n, ArrayList<String> arg)
		{
			if(arg == null)
			{
				arg = new ArrayList<String>();
			}
			arg.add(n.getNameAsString());
			super.visit(n, arg);
		}
	}

	private static class MethodVisitor extends VoidVisitorAdapter<ArrayList<String>>
{
	@Override
	public void  visit(MethodDeclaration n, ArrayList<String> arg)
	{
		if(arg == null)
		{
			arg = new ArrayList<String>();
		}
		arg.add(n.getNameAsString());
		super.visit(n, arg);
	}
}
	private static class ClassVisitor extends VoidVisitorAdapter<ArrayList<String>>
	{
		@Override
		public void  visit(ClassOrInterfaceDeclaration n, ArrayList<String> arg)
		{
			if(arg == null)
			{
				arg = new ArrayList<String>();
			}
			arg.add(n.getNameAsString());
			super.visit(n, arg);
		}
	}
	private static class ParameterVisitor extends VoidVisitorAdapter<ArrayList<String>>
	{
		@Override
		public void  visit(Parameter n, ArrayList<String> arg)
		{
			if(arg == null)
			{
				arg = new ArrayList<String>();
			}
			arg.add(n.getNameAsString());
			super.visit(n, arg);
		}
	}
}